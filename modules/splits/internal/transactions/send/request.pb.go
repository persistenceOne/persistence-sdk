// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/splits/trnasactions/send/v1beta1/request.proto

package send

import (
	fmt "fmt"
	//"github.com/cosmos/cosmos-sdk/codec"
	//sdkTypes "github.com/cosmos/cosmos-sdk/types"
	//"github.com/cosmos/cosmos-sdk/types/rest"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	test_types "github.com/persistenceOne/persistenceSDK/schema/test_types"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransactionRequest struct {
	BaseReq   *test_types.BaseReq `protobuf:"bytes,1,opt,name=base_req,json=baseReq,proto3" json:"base_req,omitempty"`
	FromID    string              `protobuf:"bytes,2,opt,name=from_iD,json=fromID,proto3" json:"from_iD,omitempty"`
	ToID      string              `protobuf:"bytes,3,opt,name=to_iD,json=toID,proto3" json:"to_iD,omitempty"`
	OwnableID string              `protobuf:"bytes,4,opt,name=ownable_iD,json=ownableID,proto3" json:"ownable_iD,omitempty"`
	Value     string              `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m TransactionRequest) Reset()         { m = TransactionRequest{} }
func (m TransactionRequest) String() string { return proto.CompactTextString(&m) }
func (*TransactionRequest) ProtoMessage()   {}
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a007232568d3f461, []int{0}
}
func (m *TransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRequest.Merge(m, src)
}
func (m *TransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionRequest proto.InternalMessageInfo

//func (m *TransactionRequest) GetBaseReq() *test_types.BaseReq {
//	if m != nil {
//		return m.BaseReq
//	}
//	return nil
//}

func (m *TransactionRequest) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *TransactionRequest) GetToID() string {
	if m != nil {
		return m.ToID
	}
	return ""
}

func (m *TransactionRequest) GetOwnableID() string {
	if m != nil {
		return m.OwnableID
	}
	return ""
}

func (m *TransactionRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*TransactionRequest)(nil), "base.transactionRequest")
}

func init() {
	proto.RegisterFile("proto/splits/trnasactions/send/v1beta1/request.proto", fileDescriptor_a007232568d3f461)
}

var fileDescriptor_a007232568d3f461 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x93, 0x7b, 0xfb, 0xe7, 0x76, 0xee, 0x2e, 0xbd, 0x70, 0x4b, 0xd5, 0x58, 0x5c, 0x94,
	0x8a, 0x98, 0xa1, 0x2a, 0x08, 0x2e, 0x6b, 0x36, 0xdd, 0x06, 0x57, 0x6e, 0xc2, 0xa4, 0x3d, 0xd6,
	0x40, 0x32, 0x27, 0x99, 0x33, 0xad, 0xf8, 0x16, 0x3e, 0x82, 0x0f, 0xe1, 0x43, 0xb8, 0x11, 0x8a,
	0x2b, 0x97, 0xd2, 0x6e, 0x7c, 0x0c, 0x49, 0x26, 0xd5, 0x82, 0xbb, 0xf3, 0x7d, 0xe7, 0xc7, 0x97,
	0x2f, 0x73, 0xd8, 0x59, 0xa6, 0x50, 0x23, 0xa7, 0x2c, 0x89, 0x35, 0x71, 0xad, 0xa4, 0x20, 0x31,
	0xd1, 0x31, 0x4a, 0xe2, 0x04, 0x72, 0xca, 0x17, 0xc3, 0x08, 0xb4, 0x18, 0x72, 0x05, 0xf9, 0x1c,
	0x48, 0x7b, 0x25, 0xee, 0xd4, 0x22, 0x41, 0xd0, 0xed, 0xeb, 0xdb, 0x58, 0x4d, 0xc3, 0x4c, 0x28,
	0x7d, 0xcf, 0x4d, 0xce, 0x0c, 0x67, 0xf8, 0x3d, 0x19, 0xba, 0x7b, 0xf4, 0x93, 0x9b, 0x20, 0xa5,
	0x48, 0xe1, 0xb6, 0xa8, 0xe0, 0xfe, 0xc6, 0x4b, 0x91, 0x78, 0xf1, 0x99, 0xaf, 0x0a, 0x85, 0x50,
	0x90, 0x1b, 0xee, 0xe0, 0xc5, 0x66, 0x8e, 0x56, 0x42, 0x56, 0x75, 0x03, 0xd3, 0xcf, 0x39, 0x67,
	0x7f, 0x0a, 0x2e, 0x54, 0x90, 0x77, 0xec, 0x9e, 0x3d, 0xf8, 0x7b, 0xb2, 0xeb, 0x55, 0xf9, 0x85,
	0xef, 0x55, 0x61, 0xde, 0x48, 0x10, 0x04, 0x90, 0x07, 0xcd, 0xc8, 0x0c, 0xce, 0x7f, 0xd6, 0xbc,
	0x51, 0x98, 0x86, 0xb1, 0xdf, 0xf9, 0xd5, 0xb3, 0x07, 0xad, 0xa0, 0x51, 0xc8, 0xb1, 0xef, 0xb4,
	0x59, 0x5d, 0x63, 0x61, 0xff, 0x2e, 0xed, 0x9a, 0xc6, 0xb1, 0xef, 0xec, 0x31, 0x86, 0x77, 0x52,
	0x44, 0x09, 0x14, 0x9b, 0x5a, 0xb9, 0x69, 0x55, 0xce, 0xd8, 0x77, 0xfe, 0xb1, 0xfa, 0x42, 0x24,
	0x73, 0xe8, 0xd4, 0xcb, 0x8d, 0x11, 0x17, 0x3b, 0x1f, 0x8f, 0xfb, 0xd6, 0xeb, 0xd3, 0x71, 0xfb,
	0x6a, 0xbb, 0x37, 0x65, 0x28, 0x09, 0x46, 0x97, 0xcf, 0x2b, 0xd7, 0x5e, 0xae, 0x5c, 0xfb, 0x7d,
	0xe5, 0xda, 0x0f, 0x6b, 0xd7, 0x5a, 0xae, 0x5d, 0xeb, 0x6d, 0xed, 0x5a, 0xd7, 0x87, 0x29, 0x4e,
	0xe7, 0x09, 0xd0, 0xe6, 0x48, 0xb1, 0xd4, 0xa0, 0xa4, 0x48, 0xf8, 0xd6, 0xef, 0x9b, 0x6b, 0x45,
	0x8d, 0xf2, 0x6d, 0x4e, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x11, 0xf4, 0x16, 0xd6, 0x01,
	0x00, 0x00,
}

func (m *TransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnableID) > 0 {
		i -= len(m.OwnableID)
		copy(dAtA[i:], m.OwnableID)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.OwnableID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToID) > 0 {
		i -= len(m.ToID)
		copy(dAtA[i:], m.ToID)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.ToID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromID) > 0 {
		i -= len(m.FromID)
		copy(dAtA[i:], m.FromID)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.FromID)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaseReq != nil {
		{
			size, err := m.BaseReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseReq != nil {
		l = m.BaseReq.Size()
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.FromID)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.ToID)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.OwnableID)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func sovRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseReq == nil {
				m.BaseReq = &test_types.BaseReq{}
			}
			if err := m.BaseReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnableID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequest = fmt.Errorf("proto: unexpected end of group")
)
