syntax = "proto3";
package persistence.oracle.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/persistenceOne/persistence-sdk/v2/x/oracle/types";

// Msg defines the oracle Msg service.
service Msg {
  // AggregateExchangeRatePrevote defines a method for submitting an aggregate
  // exchange rate prevote.
  rpc AggregateExchangeRatePrevote(MsgAggregateExchangeRatePrevote) returns (MsgAggregateExchangeRatePrevoteResponse);

  // AggregateExchangeRateVote defines a method for submitting an aggregate
  // exchange rate vote.
  rpc AggregateExchangeRateVote(MsgAggregateExchangeRateVote) returns (MsgAggregateExchangeRateVoteResponse);

  // DelegateFeedConsent defines a method for setting the feeder delegation.
  rpc DelegateFeedConsent(MsgDelegateFeedConsent) returns (MsgDelegateFeedConsentResponse);

  // AddFundsToRewardPool
  rpc AddFundsToRewardPool(MsgAddFundsToRewardPool) returns (MsgAddFundsToRewardPoolResponse);
}

// MsgAggregateExchangeRatePrevote represents a message to submit an aggregate
// exchange rate prevote.
message MsgAggregateExchangeRatePrevote {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string hash      = 1 [(gogoproto.moretags) = "yaml:\"hash\""];
  string feeder    = 2 [
    (gogoproto.moretags) = "yaml:\"feeder\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
  string validator = 3 [(gogoproto.moretags) = "yaml:\"validator\""];
}

// MsgAggregateExchangeRatePrevoteResponse defines the
// Msg/AggregateExchangeRatePrevote response type.
message MsgAggregateExchangeRatePrevoteResponse {}

// MsgAggregateExchangeRateVote represents a message to submit anaggregate
// exchange rate vote.
message MsgAggregateExchangeRateVote {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string salt           = 1 [(gogoproto.moretags) = "yaml:\"salt\""];
  string exchange_rates = 2 [(gogoproto.moretags) = "yaml:\"exchange_rates\""];
  string feeder         = 3 [
    (gogoproto.moretags) = "yaml:\"feeder\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
  string validator      = 4 [
    (gogoproto.moretags) = "yaml:\"validator\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgAggregateExchangeRateVoteResponse defines the
// Msg/AggregateExchangeRateVote response type.
message MsgAggregateExchangeRateVoteResponse {}

// MsgDelegateFeedConsent represents a message to delegate oracle voting rights
// to another address.
message MsgDelegateFeedConsent {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string operator = 1 [
    (gogoproto.moretags) = "yaml:\"operator\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
  string delegate = 2 [
    (gogoproto.moretags) = "yaml:\"delegate\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgDelegateFeedConsentResponse defines the Msg/DelegateFeedConsent response
// type.
message MsgDelegateFeedConsentResponse {}

message MsgAddFundsToRewardPool {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string from = 1 [
    (gogoproto.moretags) = "yaml:\"from\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // rewards are the coin(s) to add to reward pool
  repeated cosmos.base.v1beta1.Coin funds = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgAddFundsToRewardPoolResponse
message MsgAddFundsToRewardPoolResponse {}